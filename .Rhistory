coutn <- count -1
count <- count -1
##### Class Assignments ########################
c.matrix <- matrix(NA, nrow = N, ncol = count)
for ( i in 1:count){
c.matrix[,i] <- c.list[[i]]
}
count
c.matrix
levels(as.factor(c.list[[1]]))
levels(as.factor(c.list[[2]]))
levels(as.factor(c.list[[6]]))
h <- levels((as.factor(c.list[[i]]))
)
h
i
h <- length(levels((as.factor(c.list[[i]])))
)
i =1
h <- length(levels((as.factor(c.list[[i]]))))
c(1:h)
levels(as.factor(c.list[[i]]) <- c(1:h)
)
levels(as.factor(c.list[[i]])) <- c(1:h)
levels(as.factor(c.list[[i]]))
c(1:h)
levels(as.factor(c.list[[i]])) <- c(1:h)
temp <- as.factor(c.list[[i]])
h <- length(levels(temp))
levels(temp)
c(1:h)
levels(temp) <- c(1:h)
temp
c.matrix <- matrix(NA, nrow = N, ncol = count)
for ( i in 1:count){
temp <- as.factor(c.list[[i]])
h <- length(levels(temp))
levels(temp) <- c(1:h)
c.matrix[,i] <- temp
}
c.matrix
apply(c.matrix,1,max)
apply(c.matrix,1,mean)
sum(apply(c.matrix,1,mean) > 1.2)
sum(apply(c.matrix,1,mean) > 1.1)
((apply(c.matrix,1,mean) > 1.1)+0)
c.final <-  ((apply(c.matrix,1,mean) > 1.1)+0)
c.final <-  ((apply(c.matrix,1,mean) > 1.1)+1)
c.final
i =1
active <- levels(as.factor(c.list[[i]]))
active
as.numeric(levels(as.factor(c.list[[i]])))
for ( i in 1:count){
active <- as.numeric(levels(as.factor(c.list[[i]])))
list.betahat[[i]] <- (betahat.list[[i]][active,] != 0) +0
}
list.betahat <- list(0)
for ( i in 1:count){
active <- as.numeric(levels(as.factor(c.list[[i]])))
list.betahat[[i]] <- (betahat.list[[i]][active,] != 0) +0
}
list.betahat[[1]]
list.betahat[[2]]
list.betahat[[3]]
list.betahat[[4]]
list.betahat[[5]]
list.betahat[[6]]
list.betahat[[7]]
list.betahat[[8]]
list.betahat[[9]]
list.betahat[[10]]
list.betahat[[11]]
list.betahat[[12]]
list.betahat[[13]]
Q <- 2
matrix.betahat <- array(data = NA, dim =c(Q,count,D))
for ( z in 1:Q){
for ( x  in 1:count){
matrix.betahat[z,x,] <- list.betahat[[x]][z,]
}
}
final.betahat <- apply(matrix.betahat,c(1,3),mean)
heatmapdata <- as.data.frame(final.betahat)
heatmap.2(t(as.matrix(heatmapdata)),dendrogram="none", col =cm.colors(180), margins=c(6,10), main = "Posterior prob. ", cexCol = 0.85, cexRow = 0.7, Rowv = FALSE)
colnames(Y)
rownames(Y)
rownames(X)
colnames(X)
final.betahat
colnames(final.betahat) <- colnames(X)
heatmapdata <- as.data.frame(final.betahat)
heatmap.2(t(as.matrix(heatmapdata)),dendrogram="none", col =cm.colors(180), margins=c(6,10), main = "Posterior prob. ", cexCol = 0.85, cexRow = 0.7, Rowv = FALSE)
surv.days <- Surv(exp(30.5*time),censoring)
surv.days.fit <- survfit(surv.days ~ c.final)
plot(surv.fit.days)
plot(surv.days.fit)
c.final
surv.days
time
surv.days <- Surv(30*exp(time),censoring)
surv.days.fit <- survfit(surv.days ~ c.final)
surv.days.fit
plot(surv.days.fit)
surv.days <- Surv(exp(time),censoring)
surv.days.fit <- survfit(surv.days ~ c.final)
plot(surv.days.fit)
relev$time.train
surv.days <- Surv(exp(time),censoring)
surv.days.fit <- survfit(surv.days ~ c.final)
surv.days <- Surv(exp(time),censoring)
surv.days.fit <- survfit(surv.days ~ c.final)
mean(c.final ==1)
mean(surv.days[c.final ==1,1])
mean(surv.days[c.final ==2,1])
surv.days[c.final==2,]
min(surv.days[c.final==1,1])
((apply(c.matrix,1,mean) > 1.01)+1)
##### Class Assignments ########################
c.matrix <- matrix(NA, nrow = N, ncol = count)
for ( i in 1:count){
temp <- as.factor(c.list[[i]])
h <- length(levels(temp))
levels(temp) <- c(1:h)
c.matrix[,i] <- temp
}
c.final <-  ((apply(c.matrix,1,mean) > 1.01)+1)
############ Time Covariate Slopes FOR Relevant Clusters ############
list.betahat <- list(0)
for ( i in 1:count){
active <- as.numeric(levels(as.factor(c.list[[i]])))
list.betahat[[i]] <- (betahat.list[[i]][active,] != 0) +0
}
Q <- 2
matrix.betahat <- array(data = NA, dim =c(Q,count,D))
for ( z in 1:Q){
for ( x  in 1:count){
matrix.betahat[z,x,] <- list.betahat[[x]][z,]
}
}
final.betahat <- apply(matrix.betahat,c(1,3),mean)
colnames(final.betahat) <- colnames(X)
### Probability of betahat of genes FOR ONE SIMULATION
##colnames(final.betahat) =  c(rep("relevant",rel.D),rep("irrelevant",irrel.D))
heatmapdata <- as.data.frame(final.betahat)
heatmap.2(t(as.matrix(heatmapdata)),dendrogram="none", col =cm.colors(180), margins=c(6,10), main = "Posterior prob. ", cexCol = 0.85, cexRow = 0.7, Rowv = FALSE)
surv.days <- Surv(exp(time),censoring)
surv.days.fit <- survfit(surv.days ~ c.final)
plot(surv.days.fit)
mean(surv.days[c.final==2,1])
mean(surv.days[c.final==1,1])
p1 <- ggsurv(surv.days.fit, main = " DPMM \n Kaplan Meier Estimators \n Mean Good Prognosis 428d \n Mean Poor prognosis 91", surv.col = c("Red","Black"), cens.col ="Blue")
p1
p1 <- ggsurv(surv.days.fit, main = " m-DPMM \n Kaplan Meier Estimators \n Mean Good Prognosis 428d \n Mean Poor prognosis 91d", surv.col = c("Red","Black"), cens.col ="Blue")
p1
heatmapdata
final.betahat
list.betahat[[1]]
list.betahat[[2]]
list.betahat[[2]]
list.betahat[[3]]
list.betahat[[4]]
list.betahat[[5]]
list.betahat[[19]]
list.betahat[[20]]
matrix.betahat[1,1:20,]
for ( z in 1:Q){
for ( x  in 1:count){
matrix.betahat[z,x,1:2] <- list.betahat[[x]][1:2,]
}
}
list.betahat[[x]][1:2,]
matrix.betahat[z,x,1:D]
z
z=2
list.betahat[[x]][1:2,]
list.betahat[[x]][z,1:D]
for ( z in 1:Q){
for ( x  in 1:count){
matrix.betahat[z,x,1:D] <- list.betahat[[x]][z,1:D]
}
}
apply(matrix.betahat,c(1,3),mean)
list.betahat[[x]][1:2,]
list.betahat[[x]][1:2,]
list.betahat[[1]][1:2,]
final.betahat <- apply(matrix.betahat,c(1,2),mean)
final.betahat
for ( z in 1:Q){
for ( x  in 1:count){
matrix.betahat[z,x,1:D] <- list.betahat[[x]][z,1:D]
}
}
matrix.betahat[1,1,]
matrix.betahat[1,2,]
matrix.betahat[1,3,]
matrix.betahat[1,4,]
matrix.betahat[1,5,]
matrix.betahat[2,5,]
matrix.betahat[2,1,]
matrix.betahat[2,2,]
final.betahat <- matrix(NA, nrow =Q, ncol = D)
for ( z in 1:Q){
sum <- c(0)
for ( x in 1:count){
sum <- sum + matrix.betahat[z,x,1:D]
}
sum <- sum/count
final.betahat[z,1:D] <- sum
}
final.betahat
matrix.betahat[2,20,]
matrix.betahat[2,19,]
matrix.betahat[2,17,]
matrix.betahat[2,16,]
matrix.betahat[2,15,]
matrix.betahat[2,14,]
matrix.betahat[2,13,]
matrix.betahat[2,12,]
matrix.betahat[2,11,]
final.betahat[2,1:D] <- rep(0,D)
final.betahat
colnames(final.betahat) <- colnames(X)
hmcols<-colorRampPalette(c("white","black"))(128)
heatmap.2(heatmapdata ,dendrogram="none", margins=c(6,10),col = hmcols, main = "Feature Selection \n Peripheral Cells ", cexCol = 0.85, cexRow = 0.7, Rowv = FALSE, Colv = FALSE)
heatmapdata <- as.data.frame(final.betahat)
heatmap.2(heatmapdata ,dendrogram="none", margins=c(6,10),col = hmcols, main = "Feature Selection \n Peripheral Cells ", cexCol = 0.85, cexRow = 0.7, Rowv = FALSE, Colv = FALSE)
heatmapdata
as.numeric(heatmapdata)
as.matrix(as.numeric(final.betahat))
final.betahat
as.matrix(final.betahat)
heatmap.2(final.heatmap ,dendrogram="none", margins=c(6,10),col = hmcols, main = "Feature Selection \n Peripheral Cells ", cexCol = 0.85, cexRow = 0.7, Rowv = FALSE, Colv = FALSE)
heatmap.2(final.betahat ,dendrogram="none", margins=c(6,10),col = hmcols, main = "Feature Selection \n Peripheral Cells ", cexCol = 0.85, cexRow = 0.7, Rowv = FALSE, Colv = FALSE)
hmcols<-colorRampPalette(c("white","black"))(128)
heatmap.2(t(final.betahat) ,dendrogram="none", margins=c(6,10),col = hmcols, main = "Feature Selection \n Peripheral Cells ", cexCol = 0.85, cexRow = 0.7, Rowv = FALSE, Colv = FALSE)
pdf('time-DPMM.pdf')
p1
hmcols<-colorRampPalette(c("white","black"))(128)
heatmap.2(t(final.betahat) ,dendrogram="none", margins=c(6,10),col = hmcols, main = "Feature Selection \n Peripheral Cells ", cexCol = 0.85, cexRow = 0.7, Rowv = FALSE, Colv = FALSE)
dev.off()
rownames(final.betahat) <- c("Good Prognosis","Bad prognosis")
pdf('time-DPMM.pdf')
p1
hmcols<-colorRampPalette(c("white","black"))(128)
heatmap.2(t(final.betahat) ,dendrogram="none", margins=c(6,10),col = hmcols, main = "Feature Selection \n Peripheral Cells ", cexCol = 0.85, cexRow = 0.7, Rowv = FALSE, Colv = FALSE)
dev.off()
p1 <- ggsurv(surv.days.fit, main = " m-DPMM \n Kaplan Meier Estimators for PFS \n Mean Good Prognosis 428d \n Mean Poor prognosis 91d", surv.col = c("Red","Black"), cens.col ="Blue")
pdf('time-DPMM.pdf')
p1
hmcols<-colorRampPalette(c("white","black"))(128)
heatmap.2(t(final.betahat) ,dendrogram="none", margins=c(6,10),col = hmcols, main = "Feature Selection \n Peripheral Cells ", cexCol = 0.85, cexRow = 0.7, Rowv = FALSE, Colv = FALSE)
dev.off()
rm(list= ls())
load("/home/bit/ashar/ExpressionSets/ONE_VIEW/VIPdataset/FINAL_LATEST/DPMM-final-notime.RData")
c.final
## All features but uncorrelated data
pc <- prcomp(Y)
pc.pred <- predict(pc,newdata = Y)
plot(pc.pred[,1], pc.pred[,2], pch = 19)
p1 <- ggplot(as.data.frame(pc.pred), aes(x=pc.pred[,1], y= pc.pred[,2], colour= as.factor(c.final))) + ggtitle(" m-DPMM \n All Peripheral samples \n 'No Survival Time") + geom_point(shape=19) + labs(y = "PC1", x = "PC2", colour = "Classes")
p1
surv.ob <- Surv(exp(time),censoring)
surv.fit <- survfit(surv.ob ~ c.final)
logrank <- survdiff(surv.ob ~ c.final)
logrank
p5 <- ggsurv(surv.fit, main = " DPMM \n Kaplan Meier Estimators") + ggplot2::guides(linetype = FALSE) + ggplot2::scale_colour_discrete(name = 'Classes',breaks = c(1,2),labels = c('1', '2'))
p5
p1
p1 <- ggplot(as.data.frame(pc.pred), aes(x=pc.pred[,1], y= pc.pred[,2], colour= as.factor(c.final))) + ggtitle(" m-DPMM \n All Peripheral samples \n Only Moelcular Data") + geom_point(shape=19) + labs(y = "PC1", x = "PC2", colour = "Classes")
p1
(mu.list
)
sum.diff <- c(0)
for ( i in 1:Nps){
sum.diff <- sum.diff + abs(mu.list[[i]][1,] - mu.list[[i]][3,])
}
sum.diff.sc <- (1/Nps) * (sum.diff)/(diag(W))
range01 <- function(x){(x-min(x))/(max(x)-min(x))}
cluste <- range01(sum.diff.sc)
sum.diff.sc
for (j in 1:Nps){
for ( i in 1:N){
rank[i,j] <- dMVN(as.vector(t(Y[i,1:D])), mean = mu.list[[j]][1,1:D], Q= S.list[[j]][1,1:D,1:D], log = TRUE) - dMVN(as.vector(t(Y[i,1:D])), mean = mu.list[[j]][3,1:D], Q= S.list[[j]][3,1:D,1:D], log = TRUE)
}
}
rank <- matrix(0, nrow = N, ncol =Nps)
for (j in 1:Nps){
for ( i in 1:N){
rank[i,j] <- dMVN(as.vector(t(Y[i,1:D])), mean = mu.list[[j]][1,1:D], Q= S.list[[j]][1,1:D,1:D], log = TRUE) - dMVN(as.vector(t(Y[i,1:D])), mean = mu.list[[j]][3,1:D], Q= S.list[[j]][3,1:D,1:D], log = TRUE)
}
}
avg.rank <- apply(rank,1,mean)
order.zo <- range01(avg.rank)
order.train <- sort(order.zo,index.return = TRUE, decreasing = TRUE)
Y.order <- Y[order.train$ix,]
c.final.order <- c.final[order.train$ix]
p5
p1
colnames(Y)
hmcols<-colorRampPalette(c("green","black","red"))(256)
heatmap.2(x = t(Y.order), Rowv =TRUE ,Colv = FALSE, dendrogram = c("row"), scale ="row",ColSideColors =c("red","black")[c.final.order], labRow = colnames(Y), labCol = NA, main = ' \n Training Set \n 58 Gene DPMM signature', col =hmcols, cexRow =0.40, trace ="none", key.title = "Color Key")
legend("topright", legend = c("Bad Prognosis","Good Prognosis"),fill = c("Red","Black"), cex = 0.4)
c.ultimate <- as.factor(c.final.order)
levels(c.ultimate)
levels(c.ultimate) <- c(1,2)
c.ultimate
D
hmcols<-colorRampPalette(c("green","black","red"))(256)
heatmap.2(x = t(Y.order), Rowv =TRUE ,Colv = FALSE, dendrogram = c("row"), scale ="row",ColSideColors =c("red","black")[c.ultimate], labRow = colnames(Y), labCol = NA, main = ' \n m-DPMM All peripheral samples \n 60 Gene DPMM signature', col =hmcols, cexRow =0.40, trace ="none", key.title = "Color Key")
legend("topright", legend = c("Cluster 1","Cluster 2"),fill = c("Red","Black"), cex = 0.4)
pdf('m-DPMM.pdf')
hmcols<-colorRampPalette(c("green","black","red"))(256)
heatmap.2(x = t(Y.order), Rowv =TRUE ,Colv = FALSE, dendrogram = c("row"), scale ="row",ColSideColors =c("red","black")[c.ultimate], labRow = colnames(Y), labCol = NA, main = ' \n m-DPMM \n All peripheral samples \n 60 Gene DPMM signature', col =hmcols, cexRow =0.40, trace ="none", key.title = "Color Key")
legend("topright", legend = c("Cluster 1","Cluster 2"),fill = c("Red","Black"), cex = 0.4)
p1
dev.off()
N
############ Generating some Plots ##########################
pc <- prcomp(Y)
pc.pred <- predict(pc,newdata = Y)
p1 <- ggplot(as.data.frame(pc.pred), aes(x=pc.pred[,1], y= pc.pred[,2], colour= as.factor(c.final))) + ggtitle(" m- DPMM Clustering \n All Peripheral Cells (118)") + geom_point(shape=19) + labs(y = "PC1", x = "PC2", colour = "Classes")
pdf('m-DPMM.pdf')
hmcols<-colorRampPalette(c("green","black","red"))(256)
heatmap.2(x = t(Y.order), Rowv =TRUE ,Colv = FALSE, dendrogram = c("row"), scale ="row",ColSideColors =c("red","black")[c.ultimate], labRow = colnames(Y), labCol = NA, main = ' \n m-DPMM \n All peripheral samples \n 60 Gene DPMM signature', col =hmcols, cexRow =0.40, trace ="none", key.title = "Color Key")
legend("topright", legend = c("Cluster 1","Cluster 2"),fill = c("Red","Black"), cex = 0.4)
p1
dev.off()
############ Generating some Plots ##########################
pc <- prcomp(Y)
pc.pred <- predict(pc,newdata = Y)
p1 <- ggplot(as.data.frame(pc.pred), aes(x=pc.pred[,1], y= pc.pred[,2], colour= as.factor(c.final))) + ggtitle(" m- DPMM Clustering \n All Peripheral Cells (118) \n 60 Gene DPMM signature") + geom_point(shape=19) + labs(y = "PC1", x = "PC2", colour = "Classes")
pdf('m-DPMM.pdf')
hmcols<-colorRampPalette(c("green","black","red"))(256)
heatmap.2(x = t(Y.order), Rowv =TRUE ,Colv = FALSE, dendrogram = c("row"), scale ="row",ColSideColors =c("red","black")[c.ultimate], labRow = colnames(Y), labCol = NA, main = ' \n m-DPMM \n All peripheral samples (118) \n 60 Gene DPMM signature', col =hmcols, cexRow =0.40, trace ="none", key.title = "Color Key")
legend("topright", legend = c("Cluster 1","Cluster 2"),fill = c("Red","Black"), cex = 0.4)
p1
dev.off()
rm(list =ls())
load("/home/bit/ashar/ExpressionSets/ONE_VIEW/VIPdataset/FINAL_LAST/VIP-data-time.RData")
N
p1 <- ggsurv(surv.days.fit, main = " m-DPMM \n PFS for 45 Patients \60 Gene DPMM signature \n Mean Good Prognosis 428d \n Mean Poor prognosis 91d", surv.col = c("Red","Black"), cens.col ="Blue")
surv.days.fit <- survfit(surv.days ~ c.final)
c.final
##### Class Assignments ########################
c.matrix <- matrix(NA, nrow = N, ncol = count)
for ( i in 1:count){
temp <- as.factor(c.list[[i]])
h <- length(levels(temp))
levels(temp) <- c(1:h)
c.matrix[,i] <- temp
}
c.final <-  ((apply(c.matrix,1,mean) > 1.01)+1)
count
load("/home/bit/ashar/ExpressionSets/ONE_VIEW/VIPdataset/FINAL_LAST/VIP-data-time.RData")
mu.list
iter
iter.burnin
getwd()
c
rm(list =ls())
load("/home/bit/ashar/ExpressionSets/ONE_VIEW/VIPdataset/FINAL_LAST/VIP-data-time.RData")
print("GIBB'S SAMPLING")
count = 1
for (o in 1:iter) {
################## PARAMETERS OF THE DP Mixture Model ######################################################
## Updating the parameters based on the observations
paramtime <- posteriortimeparameters(c, That, lambda2,tau2,sigma2,beta0, betahat, Y, K, r, si, Time, N, sig2.data)
beta0 <- paramtime$beta0
betahat <- paramtime$betahat
sigma2 <- paramtime$sigma2
lambda2 <- paramtime$lambda2
tau2 <- paramtime$tau2
################# INDICATOR VARIABLE ##################################################################
## Updating the indicator variables and the parameters
source('VIPposteriorchineseAFT.R')
cognate <- posteriorchineseAFT(c,Y,alpha,That, beta0, betahat, sigma2, lambda2, tau2, K,D, r, si, Time,N, sig2.dat)
c <- cognate$indicator
beta0 <- cognate$beta0
betahat <- cognate$betahat
sigma2 <- cognate$sigma2
lambda2 <- cognate$lambda2
tau2 <- cognate$tau2
########################### The Concentration Parameter #################################################################
source('posterioralpha.R')
# Updating the concentration parameter
alpha <- posterioralpha(c, N, alpha, shape.alpha, rate.alpha)
if(o%% iter.thin == 0 ){
beta0.list[[count]] <- beta0
betahat.list[[count]] <- betahat
sigma2.list[[count]] <- sigma2
lambda2.list[[count]] <- lambda2
tau2.list[[count]] <- tau2
c.list[[count]] <- c
count <- count +1
}
print(o/iter)
}
count <- count -1
############## GIBBS SAMPLING WITH THINNING ######################################################
beta0.list <- list(0)
betahat.list <- list(0)
sigma2.list <- list(0)
lambda2.list <- list(0)
tau2.list <- list(0)
c.list <- list(0)
print("GIBB'S SAMPLING")
count = 1
for (o in 1:iter) {
################## PARAMETERS OF THE DP Mixture Model ######################################################
## Updating the parameters based on the observations
paramtime <- posteriortimeparameters(c, That, lambda2,tau2,sigma2,beta0, betahat, Y, K, r, si, Time, N, sig2.data)
beta0 <- paramtime$beta0
betahat <- paramtime$betahat
sigma2 <- paramtime$sigma2
lambda2 <- paramtime$lambda2
tau2 <- paramtime$tau2
################# INDICATOR VARIABLE ##################################################################
## Updating the indicator variables and the parameters
source('VIPposteriorchineseAFT.R')
cognate <- posteriorchineseAFT(c,Y,alpha,That, beta0, betahat, sigma2, lambda2, tau2, K,D, r, si, Time,N, sig2.dat)
c <- cognate$indicator
beta0 <- cognate$beta0
betahat <- cognate$betahat
sigma2 <- cognate$sigma2
lambda2 <- cognate$lambda2
tau2 <- cognate$tau2
########################### The Concentration Parameter #################################################################
source('posterioralpha.R')
# Updating the concentration parameter
alpha <- posterioralpha(c, N, alpha, shape.alpha, rate.alpha)
if(o%% iter.thin == 0 ){
beta0.list[[count]] <- beta0
betahat.list[[count]] <- betahat
sigma2.list[[count]] <- sigma2
lambda2.list[[count]] <- lambda2
tau2.list[[count]] <- tau2
c.list[[count]] <- c
count <- count +1
}
print(o/iter)
}
count <- count -1
##### Class Assignments ########################
c.matrix <- matrix(NA, nrow = N, ncol = count)
for ( i in 1:count){
temp <- as.factor(c.list[[i]])
h <- length(levels(temp))
levels(temp) <- c(1:h)
c.matrix[,i] <- temp
}
c.final <-  ((apply(c.matrix,1,mean) > 1.01)+1)
surv.days <- Surv(exp(time),censoring)
surv.days.fit <- survfit(surv.days ~ c.final)
table(c.final)
survdiff(surv.days ~ c.final)
boxplot(time[c.final==1], time[c.final ==2])
mean(time[c.final==1])
mean(time[c.final==2])
exp(mean(time[c.final==2]))
exp(mean(time[c.final==1]))
############ Time Covariate Slopes FOR Relevant Clusters ############
list.betahat <- list(0)
for ( i in 1:count){
active <- as.numeric(levels(as.factor(c.list[[i]])))
list.betahat[[i]] <- (betahat.list[[i]][active,] != 0) +0
}
list.betahat[[1]]
list.betahat[[2]]
Q <- 2
matrix.betahat <- array(data = NA, dim =c(Q,count,D))
for ( z in 1:Q){
for ( x  in 1:count){
matrix.betahat[z,x,1:D] <- list.betahat[[x]][z,1:D]
}
}
final.betahat <- matrix(NA, nrow =Q, ncol = D)
for ( z in 1:Q){
sum <- c(0)
for ( x in 1:count){
sum <- sum + matrix.betahat[z,x,1:D]
}
sum <- sum/count
final.betahat[z,1:D] <- sum
}
final.betahat[2,1:D] <- rep(0,D)
colnames(final.betahat) <- colnames(X)
### Probability of betahat of genes FOR ONE SIMULATION
##colnames(final.betahat) =  c(rep("relevant",rel.D),rep("irrelevant",irrel.D))
rownames(final.betahat) <- c("Good Prognosis","Bad prognosis")
surv.days <- Surv(exp(time),censoring)
surv.days.fit <- survfit(surv.days ~ c.final)
logrank <- survdiff(surv.days ~ c.final)
hmcols<-colorRampPalette(c("white","black"))(128)
heatmap.2(t(final.betahat) ,dendrogram="none", margins=c(6,10),col = hmcols, main = "Feature Selection \n Peripheral Cells ", cexCol = 0.85, cexRow = 0.7, Rowv = FALSE, Colv = FALSE)
p1 <- ggsurv(surv.days.fit, main = " m-DPMM \n PFS for 45 Patients \60 Gene DPMM signature \n Mean Good Prognosis 428d \n Mean Poor prognosis 91d", surv.col = c("Red","Black"), cens.col ="Blue")
p1
p1 <- ggsurv(surv.days.fit, main = " m-DPMM \n PFS for 45 Patients \60 Gene DPMM signature \n Mean Good Prognosis (30) 385d \n Mean Poor prognosis 76d", surv.col = c("Red","Black"), cens.col ="Blue")
p1 <- ggsurv(surv.days.fit, main = " m-DPMM \n PFS for 45 Patients \n 60 Gene DPMM signature \n Mean Good Prognosis (30) 385d \n Mean Poor prognosis 76d", surv.col = c("Red","Black"), cens.col ="Blue")
p1
p1 <- ggsurv(surv.days.fit, main = " m-DPMM \n PFS for 45 Patients \n 60 Gene DPMM signature \n Mean Good Prognosis (30) 385d \n Mean Poor prognosis(15) 76d", surv.col = c("Red","Black"), cens.col ="Blue")
p1
p1 <- ggsurv(surv.days.fit, main = " m-DPMM \n Kaplan Meier for PFS (45) Patients \n 60 Gene DPMM signature \n Mean Good Prognosis (30) 385d \n Mean Poor prognosis(15) 76d", surv.col = c("Red","Black"), cens.col ="Blue")
p1
save(list = ls(), file = 'VIP-data-time.RData')
pdf('time-DPMM.pdf')
p1
hmcols<-colorRampPalette(c("white","black"))(128)
heatmap.2(t(final.betahat) ,dendrogram="none", margins=c(6,10),col = hmcols, main = "Feature Selection \n Peripheral Cells ", cexCol = 0.85, cexRow = 0.7, Rowv = FALSE, Colv = FALSE)
dev.off()
final.betahat
rm(list =ls())
